services:
  api:
    extends:
      file: ./api/docker-compose.${BUILD_TARGET:-production}.yml
      service: api
    build:
      context: ./api/
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    env_file:
      - .env
    ports:
      - ${API_PORT:-8000}:${API_PORT:-8000}
  frontend:
    extends:
      file: ./frontend/docker-compose.${BUILD_TARGET:-production}.yml
      service: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    env_file:
      - .env
    ports:
      - ${FRONTEND_PORT:-80}:${FRONTEND_PORT:-80}
  docker-executer:
    extends:
      file: ./redis-worker/docker-compose.${BUILD_TARGET:-production}.yml
      service: docker-executer
    build:
      context: ./redis-worker/
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379/0
      DOCKER_HOST: tcp://docker-proxy:2375
    depends_on: [redis, docker-proxy]
  redis:
    image: redis:7
    container_name: redis_queue
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
  db:
    image: postgres:latest
    restart: always
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
    #   interval: 10s
    #   retries: 5
    #   start_period: 30s
    #   timeout: 10s
    env_file:
      - .env
    # volumes:
    #   - pgdata:/var/lib/postgresql/data 
    ports:
      - "5433:5432"
  docker-proxy:
    image: tecnativa/docker-socket-proxy:latest
    restart: unless-stopped
    environment:
      CONTAINERS: "1"  # allow /containers/*
      IMAGES: "1"      # allow pulls
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro


volumes:
  redis_data:
